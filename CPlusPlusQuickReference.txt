using namespace std; ####  to prevent having to specify the namespace over and over again. 

#include <iostream>  ####  allows you to use cout and cin with arrows.

specify vector types by typing in vector<desired_type>

You can check against a null pointer by using the keyword 'nullptr'.

You can quickly pass a vector as an argument like this ( findAverages(5, vector<int>{1, 3, 2, 6, -1, 4, 1, 8, 2}) )

 Methods should be explicitly typed and their arguments should probably contain the address of 
 variables or containers. Also the arguments should probably be indicated to be const so that
 they can't be manipulated.       (  static vector<double> findAverages(int K, const vector<int>& arr)  )

vectors have a method size() which returns the length of the container i.e the number of elements it contains. ( v1.size() )

cout examples : 
                      cout << "Averages of subarrays of size K: ";
                      for (double d : result) {
                        cout << d << " ";
                      }
                      cout << endl;

class declaration example :

                      class AverageOfSubarrayOfSizeK {
                       public:
                       //populate with methods and variables
                       }

You can use the upper bound value for integers by first importing limits (  #include <limits> )
and then accessing the value through the proper namespace, type and method. ( minLength = numeric_limits<int>::max(); )

Using strings:
                      #include <string>
                      Use method length() in order to get the length of the string. ( str.length() )
                      Accessing characters in the string is done using [] type brackets ( str[index] )
                      Use the method substr() in order to splice the string, where the first argument is the starting index and the second argument is the length of
                      the desired spliced string. Splices from the start index to the end of the string if no end index is provided. 
                      ( str.substr(startIndex); or str.substr(startIndex, lengthOfDesiredString); )
                      
Using vectors:
                      #include <vector>    ####  c++ arrays which allow you to access and iterate through the items easily.
                      Use method size() which returns the length of the container i.e the number of elements it contains. ( v1.size() )

Using unordered maps:

                      #include <unordered_map>
                      Instantiating an unordered_map involves specifying the desired type of the key and the value ( unordered_map<char,int> map1; )
                      Assigning values to the unordered_map is done using [] type brackets. ( map1["Key"] = "Value"; )
                      
                      Use the method size() to find the total number of key,value pairs in the unordered map. This also indicates the
                      number of distinct keys. This method returns a distinct size type so it needs to be cast as an int. ( (int) map1.size() )
                      Use the method find() to return an iterator to the corresponding value of the desired key. ( map1.find("Key"); )
                      Use the method end() to return an iterator to the position just past the last element of the map. 
                               ( Useful when paired with the method find() because find() returns the iterator just past the last element of the map.
                                 We can use this method to check whether a certain key value pair exists. )
                      
